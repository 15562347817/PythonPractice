15:35:30 完整请求
15:35:30 请求结束
15:35:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:30 path and query /todo/index {}
15:35:30 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:35:30 完整请求
15:35:30 完整请求
15:35:30 请求结束
15:35:30 请求结束
15:35:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:30 path and query /static {'file': 'todo.js'}
15:35:30 path and query /static {'file': 'gua.js'}
15:35:30 HTTP/1.1 200 OK

var todoTemplate = function (todo) {
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement            
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id,function(r){
                log('删除成功',todo_id) 
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:35:30 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:35:30 完整请求
15:35:30 请求结束
15:35:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:30 path and query /api/todo/all {}
15:35:30 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "asd",
    "completed": false,
    "ct": 1507534411,
    "ut": 1507534411
  }
]
15:35:31 完整请求
15:35:31 请求结束
15:35:31 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:31 path and query /api/todo/delete {'id': '1'}
15:35:31 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "asd",
  "completed": false,
  "ct": 1507534411,
  "ut": 1507534411
}
15:35:33 完整请求
15:35:33 请求结束
15:35:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:33 path and query /todo/index {}
15:35:33 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:35:33 完整请求
15:35:33 请求结束
15:35:33 完整请求
15:35:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:33 path and query /static {'file': 'gua.js'}
15:35:33 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:35:33 请求结束
15:35:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:33 path and query /static {'file': 'todo.js'}
15:35:33 HTTP/1.1 200 OK

var todoTemplate = function (todo) {
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement            
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id,function(r){
                log('删除成功',todo_id) 
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:35:33 完整请求
15:35:33 请求结束
15:35:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:33 path and query /api/todo/all {}
15:35:33 HTTP/1.1 200 OK
Content-Type: application/json

[]
15:35:36 完整请求
15:35:36 请求结束
15:35:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:36 path and query /api/todo/add {}
15:35:36 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:36 完整请求
15:35:36 请求结束
15:35:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:36 path and query /api/todo/add {}
15:35:36 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:36 完整请求
15:35:36 请求结束
15:35:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:36 path and query /api/todo/add {}
15:35:36 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:36 完整请求
15:35:36 请求结束
15:35:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:36 path and query /api/todo/add {}
15:35:36 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:36 完整请求
15:35:36 请求结束
15:35:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:36 path and query /api/todo/add {}
15:35:36 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:37 完整请求
15:35:37 请求结束
15:35:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:37 path and query /api/todo/add {}
15:35:37 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:37 完整请求
15:35:37 请求结束
15:35:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:37 path and query /api/todo/add {}
15:35:37 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:37 完整请求
15:35:37 请求结束
15:35:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:37 path and query /api/todo/add {}
15:35:37 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:37 完整请求
15:35:37 请求结束
15:35:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:37 path and query /api/todo/add {}
15:35:37 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '1'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '2'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '3'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '4'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '5'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312312",
  "completed": false,
  "ct": 1507534536,
  "ut": 1507534536
}
15:35:38 完整请求
15:35:38 请求结束
15:35:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:38 path and query /api/todo/delete {'id': '6'}
15:35:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:39 完整请求
15:35:39 请求结束
15:35:39 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:39 path and query /api/todo/delete {'id': '7'}
15:35:39 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:39 完整请求
15:35:39 请求结束
15:35:39 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:39 path and query /api/todo/delete {'id': '8'}
15:35:39 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:39 完整请求
15:35:39 请求结束
15:35:39 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:39 path and query /api/todo/delete {'id': '9'}
15:35:39 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "12312312",
  "completed": false,
  "ct": 1507534537,
  "ut": 1507534537
}
15:35:40 完整请求
15:35:40 请求结束
15:35:40 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:40 path and query /todo/index {}
15:35:40 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:35:40 完整请求
15:35:40 完整请求
15:35:40 请求结束
15:35:40 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:40 请求结束
15:35:40 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:40 path and query /static {'file': 'gua.js'}
15:35:40 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:35:40 path and query /static {'file': 'todo.js'}
15:35:40 HTTP/1.1 200 OK

var todoTemplate = function (todo) {
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement            
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id,function(r){
                log('删除成功',todo_id) 
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:35:40 完整请求
15:35:40 请求结束
15:35:40 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:40 path and query /api/todo/all {}
15:35:40 HTTP/1.1 200 OK
Content-Type: application/json

[]
15:35:41 完整请求
15:35:41 请求结束
15:35:41 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:41 path and query /api/todo/add {}
15:35:41 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123123",
  "completed": false,
  "ct": 1507534541,
  "ut": 1507534541
}
15:35:42 完整请求
15:35:42 请求结束
15:35:42 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:42 path and query /api/todo/delete {'id': '1'}
15:35:42 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123123",
  "completed": false,
  "ct": 1507534541,
  "ut": 1507534541
}
15:35:43 完整请求
15:35:43 请求结束
15:35:43 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:43 path and query /todo/index {}
15:35:43 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:35:43 完整请求
15:35:43 请求结束
15:35:43 完整请求
15:35:43 请求结束
15:35:43 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:43 path and query /static {'file': 'gua.js'}
15:35:43 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:35:43 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:43 path and query /static {'file': 'todo.js'}
15:35:43 HTTP/1.1 200 OK

var todoTemplate = function (todo) {
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement            
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id,function(r){
                log('删除成功',todo_id) 
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:35:43 完整请求
15:35:43 请求结束
15:35:43 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:35:43 path and query /api/todo/all {}
15:35:43 HTTP/1.1 200 OK
Content-Type: application/json

[]
15:40:53 完整请求
15:40:53 请求结束
15:40:53 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:40:53 path and query /todo/index {}
15:40:53 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:40:53 完整请求
15:40:53 请求结束
15:40:53 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:40:53 path and query /static {'file': 'gua.js'}
15:40:53 完整请求
15:40:53 请求结束
15:40:53 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:40:53 path and query /static {'file': 'todo.js'}
15:40:53 HTTP/1.1 200 OK

var todoTemplate = function (todo) {
    var ct = todo.ct
    ct = new Date(ct*1000)
    ct = ct.toLocaleTimeString()
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement            
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id,function(r){
                log('删除成功',todo_id) 
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:40:53 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:40:53 完整请求
15:40:53 请求结束
15:40:53 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:40:53 path and query /api/todo/all {}
15:40:53 HTTP/1.1 200 OK
Content-Type: application/json

[]
15:40:55 完整请求
15:40:55 请求结束
15:40:55 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:40:55 path and query /api/todo/add {}
15:40:55 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507534855,
  "ut": 1507534855
}
15:42:17 完整请求
15:42:17 请求结束
15:42:17 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:17 path and query /todo/index {}
15:42:17 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:42:17 完整请求
15:42:17 请求结束
15:42:17 完整请求
15:42:17 请求结束
15:42:17 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:17 path and query /static {'file': 'todo.js'}
15:42:17 HTTP/1.1 200 OK

var timeString = function (ct) {
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:42:17 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:17 path and query /static {'file': 'gua.js'}
15:42:17 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:42:17 完整请求
15:42:17 请求结束
15:42:17 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:17 path and query /api/todo/all {}
15:42:17 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507534855,
    "ut": 1507534855
  }
]
15:42:20 完整请求
15:42:20 请求结束
15:42:20 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:20 path and query /api/todo/add {}
15:42:20 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "123",
  "completed": false,
  "ct": 1507534940,
  "ut": 1507534940
}
15:42:36 完整请求
15:42:36 请求结束
15:42:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:36 path and query /todo/index {}
15:42:36 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:42:36 完整请求
15:42:36 请求结束
15:42:36 完整请求
15:42:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:36 path and query /static {'file': 'todo.js'}
15:42:36 HTTP/1.1 200 OK

var timeString = function (ct) {
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:42:36 请求结束
15:42:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:36 path and query /static {'file': 'gua.js'}
15:42:36 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:42:37 完整请求
15:42:37 请求结束
15:42:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:42:37 path and query /api/todo/all {}
15:42:37 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507534855,
    "ut": 1507534855
  },
  {
    "id": 2,
    "title": "123",
    "completed": false,
    "ct": 1507534940,
    "ut": 1507534940
  }
]
15:43:13 完整请求
15:43:13 请求结束
15:43:13 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:13 path and query /todo/index {}
15:43:13 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:43:13 完整请求
15:43:13 请求结束
15:43:13 完整请求
15:43:13 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:13 path and query /static {'file': 'gua.js'}
15:43:13 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:43:13 请求结束
15:43:13 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:13 path and query /static {'file': 'todo.js'}
15:43:13 HTTP/1.1 200 OK

var timeString = function (ct) {
    var ct = todo.ct
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:43:13 完整请求
15:43:13 请求结束
15:43:13 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:13 path and query /api/todo/all {}
15:43:13 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507534855,
    "ut": 1507534855
  },
  {
    "id": 2,
    "title": "123",
    "completed": false,
    "ct": 1507534940,
    "ut": 1507534940
  }
]
15:43:45 完整请求
15:43:45 请求结束
15:43:45 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:45 path and query /todo/index {}
15:43:45 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:43:45 完整请求
15:43:45 完整请求
15:43:45 请求结束
15:43:45 请求结束
15:43:45 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:45 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:45 path and query /static {'file': 'gua.js'}
15:43:45 path and query /static {'file': 'todo.js'}
15:43:45 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:43:45 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:43:45 完整请求
15:43:45 请求结束
15:43:45 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:45 path and query /api/todo/all {}
15:43:45 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507534855,
    "ut": 1507534855
  },
  {
    "id": 2,
    "title": "123",
    "completed": false,
    "ct": 1507534940,
    "ut": 1507534940
  }
]
15:43:47 完整请求
15:43:47 请求结束
15:43:47 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:47 path and query /api/todo/delete {'id': '1'}
15:43:47 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507534855,
  "ut": 1507534855
}
15:43:47 完整请求
15:43:47 请求结束
15:43:47 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:47 path and query /api/todo/delete {'id': '2'}
15:43:47 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "123",
  "completed": false,
  "ct": 1507534940,
  "ut": 1507534940
}
15:43:48 完整请求
15:43:48 请求结束
15:43:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:48 path and query /todo/index {}
15:43:48 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:43:48 完整请求
15:43:48 请求结束
15:43:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:48 path and query /static {'file': 'gua.js'}
15:43:48 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:43:48 完整请求
15:43:48 请求结束
15:43:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:48 path and query /static {'file': 'todo.js'}
15:43:48 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var deletetodo = function (todo) {

}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:43:48 完整请求
15:43:48 请求结束
15:43:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:48 path and query /api/todo/all {}
15:43:48 HTTP/1.1 200 OK
Content-Type: application/json

[]
15:43:50 完整请求
15:43:50 请求结束
15:43:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:50 path and query /api/todo/add {}
15:43:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312",
  "completed": false,
  "ct": 1507535030,
  "ut": 1507535030
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:51 完整请求
15:43:51 请求结束
15:43:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:51 path and query /api/todo/add {}
15:43:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:43:52 完整请求
15:43:52 请求结束
15:43:52 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:43:52 path and query /api/todo/add {}
15:43:52 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "12312",
  "completed": false,
  "ct": 1507535032,
  "ut": 1507535032
}
15:49:48 完整请求
15:49:48 请求结束
15:49:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:48 path and query /todo/index {}
15:49:48 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:49:48 完整请求
15:49:48 请求结束
15:49:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:48 path and query /static {'file': 'gua.js'}
15:49:48 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:49:48 完整请求
15:49:48 请求结束
15:49:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:48 path and query /static {'file': 'todo.js'}
15:49:48 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form) 
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}


var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()    

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:49:56 完整请求
15:49:56 请求结束
15:49:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:56 path and query /todo/index {}
15:49:56 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:49:56 完整请求
15:49:56 请求结束
15:49:56 完整请求
15:49:56 请求结束
15:49:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:56 path and query /static {'file': 'todo.js'}
15:49:56 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form) 
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}




var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()    

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:49:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:49:56 path and query /static {'file': 'gua.js'}
15:49:56 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:50:25 完整请求
15:50:25 请求结束
15:50:25 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:50:25 path and query /api/todo/add {}
15:50:25 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "1",
  "completed": false,
  "ct": 1507535425,
  "ut": 1507535425
}
15:51:48 完整请求
15:51:48 请求结束
15:51:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:48 path and query /todo/index {}
15:51:48 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:51:48 完整请求
15:51:48 请求结束
15:51:48 完整请求
15:51:48 请求结束
15:51:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:48 path and query /static {'file': 'gua.js'}
15:51:48 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:51:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:48 path and query /static {'file': 'todo.js'}
15:51:48 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form) 
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)   
        }
    })
}
 


var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()    

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:51:49 完整请求
15:51:49 请求结束
15:51:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:49 path and query /api/todo/all {}
15:51:49 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "12312",
    "completed": false,
    "ct": 1507535030,
    "ut": 1507535030
  },
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 3,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 5,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 6,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 7,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 8,
    "title": "12312",
    "completed": false,
    "ct": 1507535031,
    "ut": 1507535031
  },
  {
    "id": 9,
    "title": "12312",
    "completed": false,
    "ct": 1507535032,
    "ut": 1507535032
  },
  {
    "id": 10,
    "title": "1",
    "completed": false,
    "ct": 1507535425,
    "ut": 1507535425
  }
]
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '1'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312",
  "completed": false,
  "ct": 1507535030,
  "ut": 1507535030
}
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '2'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '3'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '4'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '5'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:50 完整请求
15:51:50 请求结束
15:51:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:50 path and query /api/todo/delete {'id': '6'}
15:51:50 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:51 完整请求
15:51:51 请求结束
15:51:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:51 path and query /api/todo/delete {'id': '7'}
15:51:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:51 完整请求
15:51:51 请求结束
15:51:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:51 path and query /api/todo/delete {'id': '8'}
15:51:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "title": "12312",
  "completed": false,
  "ct": 1507535031,
  "ut": 1507535031
}
15:51:51 完整请求
15:51:51 请求结束
15:51:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:51:51 path and query /api/todo/delete {'id': '9'}
15:51:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "title": "12312",
  "completed": false,
  "ct": 1507535032,
  "ut": 1507535032
}
15:52:22 完整请求
15:52:22 请求结束
15:52:22 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:22 path and query /api/todo/delete {'id': '10'}
15:52:22 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "title": "1",
  "completed": false,
  "ct": 1507535425,
  "ut": 1507535425
}
15:52:24 完整请求
15:52:24 请求结束
15:52:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:24 path and query /api/todo/add {}
15:52:24 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312",
  "completed": false,
  "ct": 1507535544,
  "ut": 1507535544
}
15:52:24 完整请求
15:52:24 请求结束
15:52:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:24 path and query /api/todo/add {}
15:52:24 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312",
  "completed": false,
  "ct": 1507535544,
  "ut": 1507535544
}
15:52:25 完整请求
15:52:25 请求结束
15:52:25 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:25 path and query /api/todo/add {}
15:52:25 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
15:52:25 完整请求
15:52:25 请求结束
15:52:25 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:25 path and query /api/todo/add {}
15:52:25 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
15:52:25 完整请求
15:52:25 请求结束
15:52:25 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:25 path and query /api/todo/add {}
15:52:25 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
15:52:25 完整请求
15:52:25 请求结束
15:52:25 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:25 path and query /api/todo/add {}
15:52:25 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
15:52:30 完整请求
15:52:30 请求结束
15:52:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:30 path and query /todo/index {}
15:52:30 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
15:52:30 完整请求
15:52:30 请求结束
15:52:30 完整请求
15:52:30 请求结束
15:52:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:30 path and query /static {'file': 'gua.js'}
15:52:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:30 path and query /static {'file': 'todo.js'}
15:52:30 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function(cell) {
    var form = `
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    `
    cell.insertAdjacentHTML('beforeend', form) 
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)   
        }
    })
}
 


var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()    

}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
15:52:30 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}
15:52:30 完整请求
15:52:30 请求结束
15:52:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
15:52:30 path and query /api/todo/all {}
15:52:30 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 3,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 5,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 6,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  }
]
16:00:06 完整请求
16:00:06 请求结束
16:00:06 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:06 path and query /todo/index {}
16:00:06 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:00:06 完整请求
16:00:06 请求结束
16:00:06 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:06 path and query /static {'file': 'gua.js'}
16:00:06 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:00:06 完整请求
16:00:06 请求结束
16:00:06 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:06 path and query /static {'file': 'todo.js'}
16:00:06 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form"
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySeletor('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:00:06 完整请求
16:00:06 请求结束
16:00:06 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:06 path and query /api/todo/all {}
16:00:06 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 3,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 5,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 6,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  }
]
16:00:49 完整请求
16:00:49 请求结束
16:00:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:49 path and query /todo/index {}
16:00:49 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:00:49 完整请求
16:00:49 完整请求
16:00:49 请求结束
16:00:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:49 path and query /static {'file': 'gua.js'}
16:00:49 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:00:49 请求结束
16:00:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:49 path and query /static {'file': 'todo.js'}
16:00:49 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySeletor('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:00:49 完整请求
16:00:49 请求结束
16:00:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:00:49 path and query /api/todo/all {}
16:00:49 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 3,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 5,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 6,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  }
]
16:01:41 完整请求
16:01:41 请求结束
16:01:41 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:41 path and query /todo/index {}
16:01:41 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:01:41 完整请求
16:01:41 请求结束
16:01:41 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:41 path and query /static {'file': 'gua.js'}
16:01:41 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:01:41 完整请求
16:01:41 请求结束
16:01:41 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:41 path and query /static {'file': 'todo.js'}
16:01:41 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:01:41 完整请求
16:01:41 请求结束
16:01:41 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:41 path and query /api/todo/all {}
16:01:41 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 3,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 5,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  },
  {
    "id": 6,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  }
]
16:01:42 完整请求
16:01:42 请求结束
16:01:42 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:42 path and query /api/todo/delete {'id': '1'}
16:01:42 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "12312",
  "completed": false,
  "ct": 1507535544,
  "ut": 1507535544
}
16:01:45 完整请求
16:01:45 请求结束
16:01:45 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:45 path and query /api/todo/update {'id': '2'}
16:01:45 form debug [''] 1
16:01:48 完整请求
16:01:48 请求结束
16:01:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:48 path and query /api/todo/delete {'id': '3'}
16:01:48 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
16:01:48 完整请求
16:01:48 请求结束
16:01:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:48 path and query /api/todo/delete {'id': '6'}
16:01:48 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
16:01:49 完整请求
16:01:49 请求结束
16:01:49 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:49 path and query /api/todo/delete {'id': '5'}
16:01:49 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
16:01:50 完整请求
16:01:50 请求结束
16:01:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:50 path and query /todo/index {}
16:01:50 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:01:50 完整请求
16:01:50 请求结束
16:01:50 完整请求
16:01:50 请求结束
16:01:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:50 path and query /static {'file': 'gua.js'}
16:01:50 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:01:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:50 path and query /static {'file': 'todo.js'}
16:01:50 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:01:50 完整请求
16:01:50 请求结束
16:01:50 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:50 path and query /api/todo/all {}
16:01:50 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  },
  {
    "id": 4,
    "title": "12312",
    "completed": false,
    "ct": 1507535545,
    "ut": 1507535545
  }
]
16:01:51 完整请求
16:01:51 请求结束
16:01:51 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:51 path and query /api/todo/delete {'id': '4'}
16:01:51 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "title": "12312",
  "completed": false,
  "ct": 1507535545,
  "ut": 1507535545
}
16:01:52 完整请求
16:01:52 请求结束
16:01:52 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:52 path and query /todo/index {}
16:01:52 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:01:52 完整请求
16:01:52 请求结束
16:01:52 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:52 path and query /static {'file': 'todo.js'}
16:01:52 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:01:52 完整请求
16:01:52 请求结束
16:01:52 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:52 path and query /static {'file': 'gua.js'}
16:01:52 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:01:52 完整请求
16:01:52 请求结束
16:01:52 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:52 path and query /api/todo/all {}
16:01:52 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "title": "12312",
    "completed": false,
    "ct": 1507535544,
    "ut": 1507535544
  }
]
16:01:55 完整请求
16:01:55 请求结束
16:01:55 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:01:55 path and query /api/todo/update {'id': '2'}
16:01:55 form debug [''] 1
16:02:22 完整请求
16:02:22 完整请求
16:02:22 请求结束
16:02:22 请求结束
16:02:22 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:22 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:22 path and query /api/todo/update {'id': '2'}
16:02:22 path and query /api/todo/delete {'id': '2'}
16:02:22 form debug [''] 1
16:02:22 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "title": "12312",
  "completed": false,
  "ct": 1507535544,
  "ut": 1507535544
}
16:02:28 完整请求
16:02:28 请求结束
16:02:28 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:28 path and query /todo/index {}
16:02:28 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:02:28 完整请求
16:02:28 请求结束
16:02:28 完整请求
16:02:28 请求结束
16:02:28 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:28 path and query /static {'file': 'gua.js'}
16:02:28 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function(id, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('GET', path, '', callback)
}
16:02:28 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:28 path and query /static {'file': 'todo.js'}
16:02:28 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(todo_id, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:02:28 完整请求
16:02:28 请求结束
16:02:28 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:28 path and query /api/todo/all {}
16:02:28 HTTP/1.1 200 OK
Content-Type: application/json

[]
16:02:32 完整请求
16:02:32 请求结束
16:02:32 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:32 path and query /api/todo/add {}
16:02:32 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536152,
  "ut": 1507536152
}
16:02:35 完整请求
16:02:35 请求结束
16:02:35 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:35 path and query /api/todo/delete {'id': '1'}
16:02:35 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536152,
  "ut": 1507536152
}
16:02:39 完整请求
16:02:39 请求结束
16:02:39 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:02:39 path and query /api/todo/add {}
16:02:39 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536159,
  "ut": 1507536159
}
16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:05:11 path and query /todo/index {}
16:05:11 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:05:11 path and query /static {'file': 'todo.js'}
16:05:11 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {

                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:05:11 path and query /static {'file': 'gua.js'}
16:05:11 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('POST', path, form, callback)
}
16:05:11 完整请求
16:05:11 请求结束
16:05:11 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:05:11 path and query /api/todo/all {}
16:05:11 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536159,
    "ut": 1507536159
  }
]
16:06:10 完整请求
16:06:10 请求结束
16:06:10 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:10 path and query /todo/index {}
16:06:10 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:06:10 完整请求
16:06:10 完整请求
16:06:10 请求结束
16:06:10 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:10 path and query /static {'file': 'gua.js'}
16:06:10 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update?id=' + id
    ajax('POST', path, form, callback)
}
16:06:10 请求结束
16:06:10 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:10 path and query /static {'file': 'todo.js'}
16:06:10 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {

                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:06:10 完整请求
16:06:10 请求结束
16:06:10 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:10 path and query /api/todo/all {}
16:06:10 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536159,
    "ut": 1507536159
  }
]
16:06:23 完整请求
16:06:23 请求结束
16:06:23 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:23 path and query /api/todo/delete {'id': '1'}
16:06:23 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536159,
  "ut": 1507536159
}
16:06:24 完整请求
16:06:24 请求结束
16:06:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:06:24 path and query /api/todo/add {}
16:06:24 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536384,
  "ut": 1507536384
}
16:07:16 完整请求
16:07:16 请求结束
16:07:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:16 path and query /todo/index {}
16:07:16 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:07:16 完整请求
16:07:16 请求结束
16:07:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:16 path and query /static {'file': 'gua.js'}
16:07:16 完整请求
16:07:16 请求结束
16:07:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:16 path and query /static {'file': 'todo.js'}
16:07:16 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {

                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:07:16 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:07:16 完整请求
16:07:16 请求结束
16:07:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:16 path and query /api/todo/all {}
16:07:16 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:07:20 完整请求
16:07:20 请求结束
16:07:20 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:20 path and query /api/todo/update {}
16:07:20 form debug [''] 1
16:07:42 完整请求
16:07:42 请求结束
16:07:42 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:42 path and query /api/todo/update {}
16:07:42 form debug ['{"id":"1","title":"1123"}'] 1
16:07:44 完整请求
16:07:44 请求结束
16:07:44 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:44 path and query /todo/index {}
16:07:44 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:07:44 完整请求
16:07:44 请求结束
16:07:44 完整请求
16:07:44 请求结束
16:07:44 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:44 path and query /static {'file': 'gua.js'}
16:07:44 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:44 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:07:44 path and query /static {'file': 'todo.js'}
16:07:44 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {

                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:07:44 完整请求
16:07:44 请求结束
16:07:44 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:44 path and query /api/todo/all {}
16:07:44 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:07:48 完整请求
16:07:48 请求结束
16:07:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:48 path and query /api/todo/update {}
16:07:48 form debug ['{"id":"1","title":"123123"}'] 1
16:07:48 完整请求
16:07:48 请求结束
16:07:48 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:07:48 path and query /api/todo/update {}
16:07:48 form debug ['{"id":"1","title":"123123"}'] 1
16:10:19 完整请求
16:10:19 请求结束
16:10:19 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:19 path and query /todo/index {}
16:10:19 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:10:19 完整请求
16:10:19 请求结束
16:10:19 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:19 path and query /static {'file': 'gua.js'}
16:10:19 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:10:19 完整请求
16:10:19 请求结束
16:10:19 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:19 path and query /static {'file': 'todo.js'}
16:10:19 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:10:19 完整请求
16:10:19 请求结束
16:10:19 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:19 path and query /api/todo/all {}
16:10:19 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:10:22 完整请求
16:10:22 请求结束
16:10:22 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:22 path and query /api/todo/update {}
16:10:22 form debug ['{"id":"1","title":"123123"}'] 1
16:10:24 完整请求
16:10:24 请求结束
16:10:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:24 path and query /todo/index {}
16:10:24 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:10:24 完整请求
16:10:24 完整请求
16:10:24 请求结束
16:10:24 请求结束
16:10:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:24 path and query /static {'file': 'gua.js'}
16:10:24 path and query /static {'file': 'todo.js'}
16:10:24 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:10:24 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:10:24 完整请求
16:10:24 请求结束
16:10:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:24 path and query /api/todo/all {}
16:10:24 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:10:34 完整请求
16:10:34 请求结束
16:10:34 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:34 path and query /api/todo/update {}
16:10:34 form debug ['{"id":"1","title":"21312"}'] 1
16:10:36 完整请求
16:10:36 请求结束
16:10:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:36 path and query /api/todo/update {}
16:10:36 form debug ['{"id":"1","title":"21312"}'] 1
16:10:38 完整请求
16:10:38 请求结束
16:10:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:38 path and query /todo/index {}
16:10:38 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:10:38 完整请求
16:10:38 完整请求
16:10:38 请求结束
16:10:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:38 path and query /static {'file': 'gua.js'}
16:10:38 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:10:38 请求结束
16:10:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:38 path and query /static {'file': 'todo.js'}
16:10:38 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
                // 删除编辑框
                todoCell.remove()
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:10:38 完整请求
16:10:38 请求结束
16:10:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:10:38 path and query /api/todo/all {}
16:10:38 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:11:37 完整请求
16:11:37 请求结束
16:11:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:37 path and query /todo/index {}
16:11:37 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:11:37 完整请求
16:11:37 完整请求
16:11:37 请求结束
16:11:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:37 path and query /static {'file': 'gua.js'}
16:11:37 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:11:37 请求结束
16:11:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:37 path and query /static {'file': 'todo.js'}
16:11:37 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:11:37 完整请求
16:11:37 请求结束
16:11:37 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:37 path and query /api/todo/all {}
16:11:37 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "123",
    "completed": false,
    "ct": 1507536384,
    "ut": 1507536384
  }
]
16:11:38 完整请求
16:11:38 请求结束
16:11:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:38 path and query /api/todo/delete {'id': '1'}
16:11:38 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "123",
  "completed": false,
  "ct": 1507536384,
  "ut": 1507536384
}
16:11:40 完整请求
16:11:40 请求结束
16:11:40 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:40 path and query /api/todo/add {}
16:11:40 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "你哈",
  "completed": false,
  "ct": 1507536700,
  "ut": 1507536700
}
16:11:46 完整请求
16:11:46 请求结束
16:11:46 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:11:46 path and query /api/todo/update {}
16:11:46 form debug ['{"id":"1","title":"搜索"}'] 1
16:13:24 完整请求
16:13:24 请求结束
16:13:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:24 path and query /todo/index {}
16:13:24 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:13:24 完整请求
16:13:24 请求结束
16:13:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:24 path and query /static {'file': 'todo.js'}
16:13:24 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            log(editFrom)
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:13:24 完整请求
16:13:24 请求结束
16:13:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:24 path and query /static {'file': 'gua.js'}
16:13:24 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:13:24 完整请求
16:13:24 请求结束
16:13:24 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:24 path and query /api/todo/all {}
16:13:24 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:13:27 完整请求
16:13:27 请求结束
16:13:27 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:27 path and query /api/todo/update {}
16:13:27 form debug ['{"id":"1","title":""}'] 1
16:13:29 完整请求
16:13:29 请求结束
16:13:29 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:29 path and query /api/todo/update {}
16:13:29 form debug ['{"id":"1","title":""}'] 1
16:13:30 完整请求
16:13:30 请求结束
16:13:30 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:30 path and query /api/todo/update {}
16:13:30 form debug ['{"id":"1","title":""}'] 1
16:13:32 完整请求
16:13:32 请求结束
16:13:32 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:32 path and query /api/todo/update {}
16:13:32 form debug ['{"id":"1","title":""}'] 1
16:13:33 完整请求
16:13:33 请求结束
16:13:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:33 path and query /api/todo/update {}
16:13:33 form debug ['{"id":"1","title":""}'] 1
16:13:33 完整请求
16:13:33 请求结束
16:13:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:33 path and query /api/todo/update {}
16:13:33 form debug ['{"id":"1","title":""}'] 1
16:13:33 完整请求
16:13:33 请求结束
16:13:33 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:33 path and query /api/todo/update {}
16:13:33 form debug ['{"id":"1","title":""}'] 1
16:13:34 完整请求
16:13:34 请求结束
16:13:34 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:34 path and query /api/todo/update {}
16:13:34 form debug ['{"id":"1","title":""}'] 1
16:13:34 完整请求
16:13:34 请求结束
16:13:34 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:34 path and query /api/todo/update {}
16:13:34 form debug ['{"id":"1","title":""}'] 1
16:13:34 完整请求
16:13:34 请求结束
16:13:34 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:34 path and query /api/todo/update {}
16:13:34 form debug ['{"id":"1","title":""}'] 1
16:13:34 完整请求
16:13:34 请求结束
16:13:34 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:34 path and query /api/todo/update {}
16:13:34 form debug ['{"id":"1","title":""}'] 1
16:13:35 完整请求
16:13:35 请求结束
16:13:35 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:35 path and query /api/todo/update {}
16:13:35 form debug ['{"id":"1","title":""}'] 1
16:13:36 完整请求
16:13:36 请求结束
16:13:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:36 path and query /todo/index {}
16:13:36 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:13:36 完整请求
16:13:36 完整请求
16:13:36 请求结束
16:13:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:36 path and query /static {'file': 'gua.js'}
16:13:36 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:13:36 请求结束
16:13:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:36 path and query /static {'file': 'todo.js'}
16:13:36 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement
            log(editFrom)
            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:13:36 完整请求
16:13:36 请求结束
16:13:36 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:36 path and query /api/todo/all {}
16:13:36 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:13:38 完整请求
16:13:38 请求结束
16:13:38 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:38 path and query /api/todo/update {}
16:13:38 form debug ['{"id":"1","title":""}'] 1
16:13:39 完整请求
16:13:39 请求结束
16:13:39 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:39 path and query /api/todo/update {}
16:13:39 form debug ['{"id":"1","title":""}'] 1
16:13:56 完整请求
16:13:56 请求结束
16:13:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:56 path and query /todo/index {}
16:13:56 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:13:56 完整请求
16:13:56 请求结束
16:13:56 完整请求
16:13:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:56 path and query /static {'file': 'todo.js'}
16:13:56 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement

            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            log(form)
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:13:56 请求结束
16:13:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:56 path and query /static {'file': 'gua.js'}
16:13:56 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:13:56 完整请求
16:13:56 请求结束
16:13:56 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:13:56 path and query /api/todo/all {}
16:13:56 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:14:00 完整请求
16:14:00 请求结束
16:14:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:14:00 path and query /api/todo/update {}
16:14:00 form debug ['{"id":"1","title":"123"}'] 1
16:14:05 完整请求
16:14:05 请求结束
16:14:05 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:14:05 path and query /todo/index {}
16:14:05 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:14:05 完整请求
16:14:05 请求结束
16:14:05 完整请求
16:14:05 请求结束
16:14:05 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:14:05 path and query /static {'file': 'todo.js'}
16:14:05 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement

            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            log(form)
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:14:05 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:14:05 path and query /static {'file': 'gua.js'}
16:14:05 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:14:05 完整请求
16:14:05 请求结束
16:14:05 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:14:05 path and query /api/todo/all {}
16:14:05 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:15:00 完整请求
16:15:00 请求结束
16:15:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:00 path and query / {}
16:15:00 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


16:15:00 完整请求
16:15:00 请求结束
16:15:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:00 path and query /todo/index {}
16:15:00 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:15:00 完整请求
16:15:00 请求结束
16:15:00 完整请求
16:15:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:00 请求结束
16:15:00 path and query /static {'file': 'gua.js'}
16:15:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:00 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:15:00 path and query /static {'file': 'todo.js'}
16:15:00 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement

            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:15:00 完整请求
16:15:00 请求结束
16:15:00 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:00 path and query /api/todo/all {}
16:15:00 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:15:01 完整请求
16:15:01 请求结束
16:15:01 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:01 path and query /favicon.ico {}
16:15:01 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
16:15:08 完整请求
16:15:08 请求结束
16:15:08 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:08 path and query /todo/index {}
16:15:08 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:15:08 完整请求
16:15:08 请求结束
16:15:08 完整请求
16:15:08 请求结束
16:15:08 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:08 path and query /static {'file': 'todo.js'}
16:15:08 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement

            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:15:08 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:08 path and query /static {'file': 'gua.js'}
16:15:08 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:15:08 完整请求
16:15:08 请求结束
16:15:08 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:08 path and query /api/todo/all {}
16:15:08 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "你哈",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
16:15:11 完整请求
16:15:11 请求结束
16:15:11 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:11 path and query /api/todo/update {}
16:15:11 kwargs,  {'id': 1} <class 'dict'>
16:15:11 debug 0
16:15:11 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "1",
  "completed": false,
  "ct": 1507536700,
  "ut": 1507536700
}
16:15:16 完整请求
16:15:16 请求结束
16:15:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:16 path and query /todo/index {}
16:15:16 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
16:15:16 完整请求
16:15:16 请求结束
16:15:16 完整请求
16:15:16 请求结束
16:15:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:16 path and query /static {'file': 'todo.js'}
16:15:16 HTTP/1.1 200 OK

var timeString = function (ct) {
    ct = new Date(ct * 1000)
    ct = ct.toLocaleTimeString()
    return ct
}



var todoTemplate = function (todo) {
    var ct = timeString(todo.ct)
    var t = `
        <div class="todo-cell" data-id="${todo.id}">
            <button class="todo-edit">编辑</button>        
            <button class="todo-delete">删除</button>
            <span>${todo.title}</span>
            <time>${ct}<time>
        </div>
    `
    return t
}

var insertTodo = function (todo) {
    var title = todo.title
    var id = todo.id
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}


var loadTodos = function () {
    // 调用 ajax api 来载入数据
    apiTodoAll(function (r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var insertEditForm = function (cell) {
    var form = `
    <div class="todo-deit-form">
        <input class="todo-edit-input">
        <button class="todo-update">更新</button>
    </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}


var bindEventTodoAdd = function () {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function () {
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            title: title,
        }
        apiTodoAdd(form, function (r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-delete')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function (r) {
                log('删除成功', todo_id)
                // 删除这个todo的页面元素
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-edit')) {
            // 删除这个todo的数据
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}

var bindEventTodoUpdate = function () {
    var b = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function (event) {
        var self = event.target
        if (self.classList.contains('todo-update')) {
            // 更新tod
            var editFrom = self.parentElement

            var input = editFrom.querySelector('.todo-edit-input')
            var title = input.value
            // 用closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function (r) {
                log('更新成功', todo_id)
            })
        }
    })
}

var bindEvents = function () {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()


}

var __main = function () {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
16:15:16 path and query /static {'file': 'gua.js'}
16:15:16 HTTP/1.1 200 OK

/*
1, 给 add button 绑定事件
2, 在事件处理函数中, 获取 input 的值
3, 用获取的值 组装一个 todo-cell HTML 字符串
4, 插入 todo-list 中
*/

var log = function () {
    console.log.apply(console, arguments)
}

var e = function (sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function (method, path, data, reseponseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function () {
        if (r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            reseponseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function (callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function (form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo 
var apiTodoDelete = function (id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
}

// 更新一个 todo 
var apiTodoUpdate = function (form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
}
16:15:16 完整请求
16:15:16 请求结束
16:15:16 cookie ['Hm_lvt_a1bff0c59495d14b9ab89245886a59b9=1498551755,1499954209', 'csrftoken=4faiGlbDLB2l7F8fMk1vAKZgS8yhZQnIrFZroT5PjDW6sq5SykwKuHlondwGk8k6', 'sessionid=ijjbs56grtz2dvbb79tq24fue94tvet3']
16:15:16 path and query /api/todo/all {}
16:15:16 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "title": "1",
    "completed": false,
    "ct": 1507536700,
    "ut": 1507536700
  }
]
