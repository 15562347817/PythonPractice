'''
format 作为Python中推荐的格式化字符串的工具
他用起来十分的方便，
下面就是一些使用它的例子
'''
'''
字符串类型格式化采用 format()方法，基本使用格式是: <模板字符串>.format(<逗号分隔的参数>) 
<模板字符串>由一系列的槽组成，用来控制修改字符串中嵌入值出
现的位置，其基本思想是将 format()方法的<逗号分隔的参数>中的参 数按照序号关系替换到<模板字符串>的槽中。
槽用大括号({})表示，如果大括号中没有序号，则按照出现顺序替 换，
'''

# example 1
ex1 = "{0}: 计算机{1}的cpu的占用率为{2}%。".format("2016-12-31", "PYTHON", 10)
print(ex1)

'''
format()方法可以非常方便地连接不同类型的变量或内容，
如果需要输 出大括号，采用{{表示{，}}表示}，例如:
'''

# example2
ex2 = "{}{}{}".format("pi :", 3.1315926, '....')
ex3 = "圆周率{{{1}{2}}}是{0}"  # 大括号本身是字符串的一部分
print(ex2)
print(ex3.format("无理数", 3.1415926, "..."))

'''
<格式控制标记>包括:<填充><对齐><宽度>,<.精度><类型>6 个字 段，
这些字段都是可选的，可以组合使用，逐一介绍如下。
<填充>、<对齐>和<宽度>是 3 个相关字段。
<宽度>指当前槽的设 定输出字符宽度，
如果该槽对应的 format()参数长度比<宽度>设定值 大，则使用参数实际长度。
如果该值的实际位数小于指定宽度，则位 数将被默认以空格字符补充。
<对齐>指参数在<宽度>内输出时的对齐 方式，分别使用<、>和^三个符号表示左对齐、右对齐和居中对齐。
< 填充>指<宽度>内除了参数外的字符采用什么方式表示，默认采用空 格，可以通过<填充>更换。例如:
'''
ex4 = "python"
print("{0:30}".format(ex4))
print("{0:>30}".format(ex4))
print("{0:^30}".format(ex4))
print("{0:-^30}".format(ex4))
print("{0:3}".format(ex4))

#<格式控制标记>中逗号(，)用于显示数字的千位分隔符，例如:
print("{0:-^20,}".format(1234567890))
print("{0:-^20}".format(1234567890))
print("{0:-^20,}".format(12345.67890))

#<.精度>表示两个含义，由小数点(.)开头。对于浮点数，精度表示 
# 小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。
print ("{0:.2f}".format(12345.67890))
print("{0:H^20.3f}".format(12345.67890))
print("{0:.4}".format("PYTHON"))

'''
<类型>表示输出整数和浮点数类型的格式规则。对于整数类型，输 出格式包括 6 种:
 b: 输出整数的二进制方式;
 c: 输出整数对应的 Unicode 字符;  d: 输出整数的十进制方式;
 o: 输出整数的八进制方式;
 x: 输出整数的小写十六进制方式;  X: 输出整数的大写十六进制方式;

'''
ex5 = "{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(425)
print (ex5)

'''
对于浮点数类型，输出格式包括 4 种:
 e: 输出浮点数对应的小写字母 e 的指数形式;  E: 输出浮点数对应的大写字母 E 的指数形式;  f: 输出浮点数的标准浮点形式;
 %: 输出浮点数的百分形式。
'''
print("{0:e},{0:E},{0:f},{0:%}".format(3.14))
print("{0:.2e},{0:.2E},{0:.2f},{0:.2%}".format(3.14))